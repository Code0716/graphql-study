# this file is used for golangci-lint command,
# with lint checking rules
run:
  # default concurrency is a available CPU number
  #concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 1m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: false

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  skip-dirs:

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:
    - ".*_generate\\.go$"
    - "generated_.*\\.go$"
    - ".*\\.gen\\.go$"
    - ".*\\.pb\\.go$"

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

linters:
  enable-all: false
  enable:
    - deadcode # Finds unused code
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs.
    - gosimple # Linter for Go source code that specializes in simplifying a code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - structcheck # Finds an unused struct fields
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go cod
    - unused # Checks Go code for unused constants, variables, functions and types
    - varcheck # Finds unused global variables and constants
    - revive
    #    - dupl # Tool for code clone detection
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # The most opinionated Go source code linte
    - gocyclo # Computes and checks the cyclomatic complexity of functions
    - gosec #Inspects source code for security problems
    - misspell #Finds commonly misspelled English words in comments
    - nakedret #Finds naked returns in functions greater than a specified function length
    - prealloc #Finds slice declarations that could potentially be preallocated
    - exportloopref #checks for pointers to enclosing loop variables
    - unconvert #Remove unnecessary type conversions
    - unparam #Reports unused function parameters
    - depguard #Go linter that checks if package imports are in a list of acceptable packages
    - goimports # Goimports does everything that gofmt does. Additionally it checks unused import

  # 何を無効にしたか明示
  disable:
    - interfacer #Linter that suggests narrower interface types
    - scopelint #Scopelint checks for unpinned variables in go programs
    - golint #Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    - gochecknoglobals # Checks that no globals are present in Go code
    - gochecknoinits # Checks that no init functions are present in Go cod
    - gofmt # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - lll # Reports long lines
    - maligned # Tool to detect Go structs that would take less memory if their fields were sorted
    - stylecheck #Stylecheck is a replacement for golint

linters-settings:
  depguard:
    list-type: blacklist
    packages:
      # logging is allowed only by golang.org/x/xerrors
      - errors # これは実はチェックできてない。ここをやるとすると自前でAnalizerとかつくらないときっとダメだな。
      - github.com/pkg/errors

  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    exclude:

  govet:
    check-shadowing: false
    settings:
      printf:
        funcs:
          - Errorf
          - Warnf
          - Infof
          - Wrapf
          - ErrorfWithStack
          - WarnfWithStack
          - Appendf

  golint:
    min-confidence: 0.8 # default 0.8. 小さいほど厳しくなる
  gocyclo:
    min-complexity: 20
  dupl:
    threshold: 100
  goconst:
    min-len: 2
    min-occurrences: 2
  misspell:
    locale: US
  goimports:
    local-prefixes: github.com/Code0716/graphql-study
  gocritic:
  # https://go-critic.github.io/overview
#    enabled-tags:
#      - diagnostic
#      - performance
issues:
  exclude-use-default: false
  exclude:
    # gosec: Duplicated errcheck checks
    - G104

    - should have a package comment, unless it's in another file for this package

    # 以下はdefaultだと除外されているが、現在有効化したもの
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    #- Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
    # golint: Annoying issue about not having a comment. The rare codebase has such comments
    #- (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)
    # golint: False positive when tests are defined in package 'test'
    # - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this
    # govet: Common false positives
    #- (possible misuse of unsafe.Pointer|should have signature)
    # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    #- ineffective break statement. Did you mean to break out of the outer loop
    # gosec: Too many false-positives on 'unsafe' usage
    #- Use of unsafe calls should be audited
    # gosec: Too many false-positives for parametrized shell calls
    #- Subprocess launch(ed with variable|ing should be audited)
    # gosec: Too many issues in popular repos
    #- (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)
    # gosec: False positive is triggered by 'src, err := os.ReadFile(filename)'
    #- Potential file inclusion via variable

  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: scripts
      linters:
        - goconst
