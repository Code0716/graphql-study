# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Person {
  id: Int!
  person_id: ID!
  name: String!
  address: String!
  phone_number: String!
  class_name: String!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

type Classification {
  id: ID!
  classId: String!
  class_name: String!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}

type Testimony {
  id: Int!
  testimony_id: ID!
  person_id: String!
  testimony: String!
  status: String!
  created_at: Time!
  updated_at: Time!
  deleted_at: Time
}
type CommonResponse {
  Message: String!
}

input GetPersonParams {
  id: ID
  name: String
}

input CreatePerson {
  id: Int
  person_id: ID
  name: String!
  address: String
  phone_number: String
  class_name: String
}

input updatePerson {
  id: Int!
  person_id: ID!
  name: String!
  address: String
  phone_number: String
  class_name: String!
}

input CreateClassification {
  class_id: ID
  class_name: String!
}

input createTestimony {
  id: Int
  testimony_id: ID
  person_id: String!
  testimony: String!
  status: String!
}

input updateTestimony {
  id: Int!
  testimony_id: ID!
  person_id: String!
  testimony: String!
  status: String!
}

input GetTestimonyParams {
  testimony_id: ID
  person_id: String
  status: String
  created_at: Time
}

input Pager {
  limit: Int
  offset: Int
}

input PersonPager {
  limit: Int
  offset: Int
  class_name: String
}

type Query {
  getPersons(input: PersonPager): [Person!]!
  getPerson(input: GetPersonParams!): Person!
  classifications(input: Pager!): [Classification!]!
  getTestimonies(params: GetTestimonyParams, pager: Pager!): [Testimony]!
  getTestimony(pager: Pager!): Testimony!
}

type Mutation {
  # person
  createPerson(input: CreatePerson!): CommonResponse
  updatePerson(input: CreatePerson!): Person!
  deletePerson(person_id: String!): Person!
  # classification
  createClassification(input: CreateClassification!): Classification!
  deleteClassification(classId: String!): CommonResponse
  # testimony
  createTestimony(input: createTestimony!): CommonResponse
  updateTestimony(input: updateTestimony!): Testimony!
  deleteTestimony(testimony_id: String!): CommonResponse
}

scalar Date
scalar Time
scalar Map
scalar Upload
scalar Any
scalar YesNo

enum TestimonyStatus {
  DRAFT
  PUBLIC
  OTHER
}
